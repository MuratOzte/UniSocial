// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Post {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    title     String
    content   String
    image     String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    likedBy   String[] @default([])

    author      User       @relation(fields: [authorId], references: [id])
    authorId    String     @db.ObjectId
    Community   Community? @relation(fields: [communityId], references: [id])
    communityId String?    @db.ObjectId

    comments Comment[]
}

model User {
    id         String   @id @default(auto()) @map("_id") @db.ObjectId
    name       String
    surname    String
    email      String   @unique
    password   String
    univercity String
    department String
    status     String?
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    profilePicture String?
    isTeacher      Boolean @default(false)

    posts    Post[]
    comments Comment[]

    following   Follower[]         @relation("FollowingRelation")
    followers   Follower[]         @relation("FollowersRelation")
    communities CommunityMember[]
    events      EventParticipant[]
    socialMedia SocialMediaLinks?
    about       About?
}

model SocialMediaLinks {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    userId    String   @unique @db.ObjectId
    linkedin  String?
    github    String?
    twitter   String?
    instagram String?
    facebook  String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model About {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    userId      String   @unique @db.ObjectId
    description String?
    location    String?
    birthDate   String?
    gender      String?
    hobbies     String?
    telno       String?
    email       String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    user User @relation(fields: [userId], references: [id])
}

model Follower {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    followerId  String   @db.ObjectId
    followingId String   @db.ObjectId
    createdAt   DateTime @default(now())

    follower  User @relation("FollowersRelation", fields: [followerId], references: [id])
    following User @relation("FollowingRelation", fields: [followingId], references: [id])
}

model Community {
    id             String   @id @default(auto()) @map("_id") @db.ObjectId
    name           String
    type           String
    activityField  String
    profilePicture String?
    email          String   @unique
    password       String
    description    String?
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt

    posts           Post[]
    CommunityMember CommunityMember[]
    events          Event[]
}

model CommunityMember {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    communityId String @db.ObjectId
    userId      String @db.ObjectId

    community Community @relation(fields: [communityId], references: [id])
    user      User      @relation(fields: [userId], references: [id])
}

model Event {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    title       String
    description String?
    date        String
    time        String
    location    String?
    eventType   String
    price       Int?
    image       String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    community   Community @relation(fields: [communityId], references: [id])
    communityId String    @db.ObjectId

    participants EventParticipant[]
}

model EventParticipant {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    eventId  String   @db.ObjectId
    userId   String   @db.ObjectId
    joinedAt DateTime @default(now())

    event Event @relation(fields: [eventId], references: [id])
    user  User  @relation(fields: [userId], references: [id])
}

model Comment {
    id        String   @id @default(auto()) @map("_id") @db.ObjectId
    content   String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    author   User   @relation(fields: [authorId], references: [id])
    authorId String @db.ObjectId

    post   Post?   @relation(fields: [postId], references: [id])
    postId String? @db.ObjectId
}
